<?php

/*
 * This functon selects nodes by types for archivation and archives all
 */
function chatroom_archiving_archive_old_chats($archved_types) {
  // fetching id's of all old chatrooms
  watchdog('debug', 'chat node archvation is started');

  $sql = "SELECT *
          FROM {node} n
          LEFT JOIN {field_data_field_chatroom} chat_field ON n.nid = chat_field.entity_id
          LEFT JOIN {chatroom} chatroom ON chat_field.field_chatroom_cid = chatroom.cid
          WHERE n.type IN (:archved_types) AND n.status = 1 AND chatroom.archived = 0";
  $args = array(
      ':archved_types' => $archved_types,
  );
  $result = db_query($sql, $args);
  while ($row = $result->fetchAssoc()) {
    chatroom_archiving_archive_old_chat_nodes($row['nid']);
    watchdog('debug', 'chat node archved: '.$row['nid']);
  }
  menu_cache_clear_all();
  watchdog('debug', 'chat node archvation is ended');
}

/*
 * Chat's archivation
 * This functon archves node with givven nid
 */
function chatroom_archiving_archive_old_chat_nodes($nid) {
  // work on old node
  $archived_node = node_load($nid);
  $new_node = clone $archived_node;
  $title_parts = explode(' - ', $archived_node->title);    
  $title_for_archived_node = $title_parts[0] .' - ' .date('F jS Y', $archived_node->created);
  $archived_node->title = $title_for_archived_node;
  foreach ($archived_node->field_chatroom["und"] as $delta => $chat) {
    unset($archived_node->field_chatroom["und"][$delta]);
    $archived_node->field_chatroom["und"][$delta]['chatroom'] = chatroom_archiving_object_to_field_array($chat["chatroom"]);
    $archived_node->field_chatroom["und"][$delta]['chatroom']['chatroom_archived'] = '1';
    $archived_node->field_chatroom["und"][$delta]["cid"] = $chat["cid"];
  }
  node_save($archived_node);  
  // creation new node based on old
  $new_node->title = $title_parts[0];
  unset($new_node->nid);
  unset($new_node->vid);
  unset($new_node->created);
  unset($new_node->changed);
  unset($new_node->tnid);
  unset($new_node->revision_timestamp);
  unset($new_node->revision_uid);
  unset($new_node->last_comment_timestamp);
  unset($new_node->last_comment_name);
  unset($new_node->last_comment_uid);
  unset($new_node->comment_count);
  unset($new_node->name);
  unset($new_node->picture);
  unset($new_node->data);
  unset($new_node->cid);
 
  foreach ($new_node->field_chatroom["und"] as $delta => $chat) {
    unset($new_node->field_chatroom["und"][$delta]);
    $new_node->field_chatroom["und"][$delta]['chatroom']['chatroom_title'] = $chat["chatroom"]->get('title');
    $new_node->field_chatroom["und"][$delta]['chatroom']['chatroom_public'] = $chat["chatroom"]->get('public');
    
    $roles = $chat["chatroom"]->get('allowedRids');
    foreach ($roles as $key => $value) {
      if($value->read_only)
        $new_node->field_chatroom["und"][$delta]['chatroom']['chatroom_read_only_roles'][] = $key;
      else 
        $new_node->field_chatroom["und"][$delta]['chatroom']['chatroom_write_roles'][] = $key;
    } 
    $new_node->field_chatroom["und"][$delta]['chatroom']['chatroom_format'] = $chat["chatroom"]->get('format');
  }
  
  node_save($new_node);
  //we want to assign old path to new node
  $path = drupal_lookup_path('alias',"node/".$nid);
  path_delete(array(
      'source' => "node/".$nid
  ));
  $path_array = array(
      'source' => "node/".$new_node->nid,
      'alias' => $path
  );
  path_save($path_array);
  // rebuilding menus to keep new node in menu
  db_update('menu_links')
  ->fields(array(
    'link_path' => "node/".$new_node->nid,
  ))
  ->condition('link_path', "node/".$nid, '=')
  ->execute();  
}

function chatroom_archiving_object_to_field_array($chatroom) {
  $field_chatroom['chatroom_cid'] = $chatroom->get('cid');
  $field_chatroom['chatroom_title'] = $chatroom->get('title');
  $field_chatroom['chatroom_public'] = $chatroom->get('public');
  $field_chatroom['chatroom_archived'] = $chatroom->get('archived');
  $roles = $chatroom->get('allowedRids');
  foreach ($roles as $key => $value) {
    if($value->read_only)
      $field_chatroom['chatroom_read_only_roles'][] = $key;
    else 
      $field_chatroom['chatroom_write_roles'][] = $key;
  }
  
  $field_chatroom['chatroom_format'] = $chatroom->get('format');
  return $field_chatroom;
}